{"version":3,"sources":["Connect/Connect.js","Components/interfaces.js","Frontpage/Frontpage.js","App.js","reportWebVitals.js","index.js"],"names":["Connect","useState","hostError","setHostError","usernameError","setUsernameError","passwordError","setPasswordError","connectionError","setConnectionError","history","useHistory","submit","e","preventDefault","host","document","getElementById","value","username","password","fetch","method","headers","Accept","body","JSON","stringify","mode","then","response","json","path","state","ok","interfaces","vlans","banner","push","pathname","catch","className","Alert","severity","AlertTitle","src","alt","Box","component","sx","m","width","color","noValidate","autoComplete","TextField","id","label","variant","error","type","Button","onClick","Row","props","row","config","React","open","setOpen","status","setStatus","TableRow","borderBottom","TableCell","IconButton","size","scope","interface","align","ip_address","protocol","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","margin","Typography","gutterBottom","defaultValue","FormControl","FormLabel","FormGroup","FormControlLabel","control","Switch","checked","onChange","name","FormHelperText","subnet_mask","InterfacesList","list","TableContainer","Paper","Table","TableHead","TableBody","map","Frontpage","enqueueSnackbar","useSnackbar","ws","useRef","isStopped","setStopped","setConfig","success","setSucces","successMessage","setSuccessMessage","snmp","setSnmp","timer","location","useLocation","useEffect","console","log","getSnmpInfo","current","setInterval","connectToWs","clearInterval","close","WebSocket","onopen","onclose","setTimeout","onmessage","message","parse","data","values","toString","replace","user","authentication","privacy","onClose","s","hours","Math","floor","mins","msToTime","textAlign","bytes","mb","round","bytesToMb","hostname","changeHostname","borderRadius","minWidth","fontWeight","border","vlan","ports","App","darkModeTheme","createTheme","palette","useTheme","ThemeProvider","theme","maxSnack","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4d7af4b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Alert, AlertTitle, Box, Button, TextField} from \"@mui/material\";\r\nimport './Connect.css';\r\n\r\nfunction Connect() {\r\n    const [hostError, setHostError] = useState(false)\r\n    const [usernameError, setUsernameError] = useState(false)\r\n    const [passwordError, setPasswordError] = useState(false)\r\n    const [connectionError, setConnectionError] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const navigate = (path, state) => {\r\n        history.push({\r\n            pathname: path,\r\n            state: state\r\n        })\r\n    }\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        let host = document.getElementById(\"host\").value;\r\n        let username = document.getElementById(\"username\").value;\r\n        let password = document.getElementById(\"password\").value;\r\n        if (host === \"\") {\r\n            setHostError(true);\r\n        } else if (username === \"\") {\r\n            setUsernameError(true);\r\n        } else if (password === \"\") {\r\n            setPasswordError(true);\r\n        } else {\r\n            fetch(\"http://localhost:8080/api/connect\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Accept: \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    \"host\": host,\r\n                    \"username\": username,\r\n                    \"password\": password\r\n                }),\r\n                mode: \"cors\",\r\n            }).then(response => response.json().then(json => {\r\n                if (response.ok) {\r\n                    navigate(\"/frontpage\", {\r\n                        interfaces: json[\"interfaces\"],\r\n                        vlans: json[\"vlans\"],\r\n                        banner: json[\"banner\"],\r\n                        host: host,\r\n                        username: username,\r\n                        password: password,\r\n                    })\r\n                } else {\r\n                    setConnectionError(true)\r\n                }\r\n            })).catch(e => {\r\n                setConnectionError(true)\r\n            })\r\n        }\r\n    }\r\n    return <div>\r\n        <header className=\"App-header\">\r\n            {\r\n            connectionError ? <div className={\"error-container\"}><Alert severity=\"error\">\r\n                <AlertTitle>Fejl</AlertTitle>\r\n                Kunne ikke forbinde — <strong>Prøv igen senere!</strong>\r\n            </Alert></div> : <div></div>\r\n            }\r\n\r\n            <img src=\"assets/images/cisco.png\" className=\"App-logo\" alt=\"logo\"/>\r\n            <Box\r\n                component=\"form\"\r\n                sx={{\r\n                    '& > :not(style)': { m: 1, width: '25ch', color: \"white\" },\r\n                }}\r\n                noValidate\r\n                autoComplete=\"off\"\r\n            >\r\n                <TextField id=\"host\" label=\"Host\" variant=\"filled\" error={hostError} />\r\n                <br></br>\r\n                <TextField id=\"username\" label=\"Username\" variant=\"filled\" error={usernameError} />\r\n                <br></br>\r\n                <TextField id=\"password\" label=\"Password\" variant=\"filled\" type={\"password\"} error={passwordError} />\r\n                <br></br>\r\n                <Button variant=\"outlined\" onClick={(value) => submit(value)}>Forbind</Button>\r\n            </Box>\r\n        </header>\r\n\r\n    </div>;\r\n}\r\n\r\nexport default Connect;","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport {useEffect} from \"react\";\r\nimport {Button, FormControlLabel, Switch, TextField} from \"@mui/material\";\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormHelperText from '@mui/material/FormHelperText';\r\n\r\nfunction Row(props) {\r\n    const { row, config } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const [status, setStatus] = React.useState(row.status === \"up\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: '0px solid black' } }}>\r\n                <TableCell sx={{ borderBottom: '0px solid black' }}>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell sx={{ borderBottom: '0px solid black' }} component=\"th\" scope=\"row\">\r\n                    {row.interface}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.ip_address}</TableCell>\r\n                <TableCell align=\"right\">{row.ok}</TableCell>\r\n                <TableCell align=\"right\">{row.method}</TableCell>\r\n                <TableCell align=\"right\">{row.status}</TableCell>\r\n                <TableCell align=\"right\">{row.protocol}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Rediger\r\n                            </Typography>\r\n                            <Box\r\n                                component=\"form\"\r\n                                sx={{\r\n                                    '& > :not(style)': { m: 1, width: '25ch' },\r\n                                }}\r\n                                noValidate\r\n                                autoComplete=\"off\"\r\n                            >\r\n                                <TextField id=\"new_ip_address\" label=\"Ip Address\" variant=\"filled\" defaultValue={row.ip_address} />\r\n                                <TextField id=\"subnet_mask\" label=\"Subnet Mask\" variant=\"filled\" />\r\n                                <FormControl component=\"fieldset\" variant=\"standard\">\r\n                                    <FormLabel component=\"legend\">Assign status on interface</FormLabel>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switch checked={status} onChange={() => setStatus(!status)} name=\"status\" />\r\n                                            }\r\n                                            label={status ? \"Up\" : \"Down\"}\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormHelperText>This switches between 'shutdown' and 'no shutdown'</FormHelperText>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Button variant=\"outlined\" onClick={(value) => {\r\n                                fetch(\"http://localhost:8080/api/interface/configure\", {\r\n                                    method: 'POST',\r\n                                    mode: 'cors',\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\",\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        interface: row.interface,\r\n                                        ip_address: document.getElementById(\"new_ip_address\").value,\r\n                                        subnet_mask: document.getElementById(\"subnet_mask\").value,\r\n                                        host: config[\"host\"],\r\n                                        username: config[\"username\"],\r\n                                        password: config[\"password\"],\r\n                                    })\r\n                                })\r\n                            }}>Gem</Button>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        interface: PropTypes.string.isRequired,\r\n        ip_address: PropTypes.string.isRequired,\r\n        ok: PropTypes.string.isRequired,\r\n        method: PropTypes.string.isRequired,\r\n        status: PropTypes.string.isRequired,\r\n        protocol: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\nexport default function InterfacesList(props) {\r\n    const { list, config } = props;\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell />\r\n                        <TableCell>Interface</TableCell>\r\n                        <TableCell align=\"right\">Ip Address</TableCell>\r\n                        <TableCell align=\"right\">Ok</TableCell>\r\n                        <TableCell align=\"right\">Method</TableCell>\r\n                        <TableCell align=\"right\">Status</TableCell>\r\n                        <TableCell align=\"right\">Protocol</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {list.map((row) => (\r\n                        <Row key={row.interface} row={row} config={config} />\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport './Frontpage.css';\r\nimport {Alert, Box, Button, TextField, Typography} from \"@mui/material\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport InterfacesList from \"../Components/interfaces\";\r\nimport {useSnackbar} from \"notistack\";\r\n\r\nfunction Frontpage() {\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const ws = useRef(null)\r\n    const [isStopped, setStopped] = useState(false);\r\n    const [config, setConfig] = useState({\r\n        interfaces: [],\r\n        vlans: []\r\n    });\r\n    const [success, setSucces] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [snmp, setSnmp] = useState({\r\n        \"sys_uptime\": 0,\r\n        \"free_memory\": 0,\r\n        \"sys_info\": \"\"\r\n    })\r\n    const timer = useRef(null);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        console.log(location.state)\r\n        setConfig(location.state)\r\n        getSnmpInfo();\r\n        timer.current = setInterval(getSnmpInfo, 60000)\r\n        connectToWs();\r\n        return () => {\r\n            clearInterval(timer.current)\r\n            setStopped(true)\r\n            ws.current.close()\r\n        }\r\n    }, [])\r\n\r\n    const connectToWs = () => {\r\n        ws.current = new WebSocket(\"ws://localhost:8080/api/ws/\" + location.state[\"host\"]);\r\n        ws.current.onopen = () => enqueueSnackbar(\"Connection to traps has been opened\", {variant: \"success\"})\r\n        ws.current.onclose = () => {\r\n            enqueueSnackbar(\"Connection to traps has been closed\", {variant: \"error\"})\r\n            if (!isStopped) {\r\n                setTimeout(() => {\r\n                    connectToWs();\r\n                }, 1000)\r\n            }\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!ws.current) return;\r\n\r\n        ws.current.onmessage = e => {\r\n            if (isStopped) return;\r\n            const message = JSON.parse(e.data);\r\n            console.log(\"e\", message);\r\n            enqueueSnackbar(message.values.toString().replace(\",\", \" - \"), {variant: \"info\"});\r\n        };\r\n    }, [isStopped]);\r\n\r\n    const handleNotification = (variant, message) => () => {\r\n        // variant could be success, error, warning, info, or default\r\n        enqueueSnackbar(message, {variant});\r\n    };\r\n\r\n    const getSnmpInfo = () => {\r\n        fetch(\"http://localhost:8080/api/snmp\", {\r\n            method: 'POST',\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                host: location.state[\"host\"],\r\n                user: \"MYUSER\",\r\n                authentication: \"MYPASS123\",\r\n                privacy: \"MYKEY123\"\r\n            })\r\n        }).then(response => response.json().then(json => setSnmp(json)))\r\n    }\r\n\r\n    const changeHostname = (e) => {\r\n        e.preventDefault();\r\n        let hostname = document.getElementById(\"hostname\").value;\r\n        fetch(\"http://localhost:8080/api/hostname?hostname=\" + hostname).then(response => {\r\n            if (response.ok) {\r\n                setSuccessMessage(\"Hostname er blevet ændret til \" + hostname)\r\n                setSucces(true)\r\n            }\r\n        })\r\n    }\r\n\r\n    const msToTime = (s) => {\r\n        var hours = Math.floor(s / (1000 * 60 * 60));\r\n        s -= hours * (1000 * 60 * 60);\r\n\r\n        var mins = Math.floor(s / (1000 * 60));\r\n        s -= mins * (1000 * 60);\r\n\r\n        var seconds = Math.floor(s / (1000));\r\n        s -= seconds * (1000);\r\n\r\n        return hours + ' Hours ' + mins + ' Minutes';\r\n    }\r\n\r\n    const bytesToMb = (bytes) => {\r\n        var kb = (bytes / 1024);\r\n        var mb = (kb / 1024);\r\n        return Math.round(mb) + \" Mb\"\r\n    }\r\n\r\n    const navigate = (path) => {\r\n        history.push(path);\r\n    }\r\n    return <div className={\"frontpage\"}>\r\n        {\r\n            success ? <div className={\"success-container\"}>\r\n                <Alert onClose={() => setSucces(false)}>{successMessage}</Alert>\r\n            </div> : <div></div>\r\n        }\r\n        <Button onClick={() => navigate(\"/\")} variant=\"text\">Tilbage</Button>\r\n        <div className=\"banner\">\r\n            <Typography>{config[\"banner\"]}</Typography>\r\n        </div>\r\n        <div className=\"sys-info\">\r\n            <div>\r\n                <Typography variant=\"subtitle1\">Sys Uptime</Typography>\r\n                <Typography variant=\"h5\">{msToTime(snmp[\"sys_uptime\"])}</Typography>\r\n            </div>\r\n            <div style={{textAlign: 'right'}}>\r\n                <Typography variant=\"subtitle1\">Free memory</Typography>\r\n                <Typography variant=\"h5\">{bytesToMb(snmp[\"free_memory\"])}</Typography>\r\n            </div>\r\n        </div>\r\n        <h1>Hostname</h1>\r\n        <div className={\"hostname-container\"}>\r\n            <TextField id=\"hostname\" label=\"Hostname\" variant=\"filled\"/>\r\n            <Button variant=\"outlined\" onClick={(value) => changeHostname(value)}>Gem hostname</Button>\r\n        </div>\r\n        <h1>Vlans</h1>\r\n        <Box>\r\n            <TableContainer component={Paper}\r\n                            sx={{borderRadius: \"10px\"}}>\r\n                <Table sx={{minWidth: 650}} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell sx={{fontWeight: \"700\"}}>Vlan</TableCell>\r\n                            <TableCell sx={{fontWeight: \"700\"}} align=\"right\">Name</TableCell>\r\n                            <TableCell sx={{fontWeight: \"700\"}} align=\"right\">Status</TableCell>\r\n                            <TableCell sx={{fontWeight: \"700\"}} align=\"right\">Ports</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {config[\"vlans\"].map((row) => (\r\n                            <TableRow\r\n                                key={row.vlan}\r\n                                sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n                            >\r\n                                <TableCell sx={{color: \"white\"}} component=\"th\" scope=\"row\">\r\n                                    {row.vlan}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.name}</TableCell>\r\n                                <TableCell align=\"right\">{row.status}</TableCell>\r\n                                <TableCell align=\"right\">{row.ports !== null ? row.ports.toString() : null}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n        <h1>Interfaces</h1>\r\n        <InterfacesList key={config} list={config[\"interfaces\"]} config={{\r\n            host: config[\"host\"],\r\n            username: config[\"username\"],\r\n            password: config[\"password\"]\r\n        }}></InterfacesList>\r\n        <div className=\"footer\">\r\n            <Typography>{snmp[\"sys_info\"]}</Typography>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default Frontpage;","import {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Connect from \"./Connect/Connect\";\nimport Frontpage from \"./Frontpage/Frontpage\";\nimport {createTheme, ThemeProvider, useTheme} from '@mui/material/styles';\nimport {SnackbarProvider, useSnackbar} from 'notistack';\n\nfunction App() {\n    // Update the theme only if the mode changes\n    const darkModeTheme = createTheme({\n        palette: {\n            mode: 'dark',\n        },\n    });\n\n\n    const theme = useTheme();\n    return (\n        <ThemeProvider theme={darkModeTheme}>\n            <SnackbarProvider maxSnack={5}>\n                <div className=\"App\">\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Connect></Connect>\n                            </Route>\n                            <Route path={\"/frontpage\"}>\n                                <Frontpage></Frontpage>\n                            </Route>\n                        </Switch>\n                    </Router>\n                </div>\n            </SnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}